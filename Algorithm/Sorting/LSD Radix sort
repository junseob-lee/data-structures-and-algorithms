public static void lsdRadixSort(int[] arr) {
    // Check for null input
    if (arr == null) {
        throw new IllegalArgumentException("Array cannot be null.");
    }

    // Find the maximum element to determine the number of digits
    int max = getMax(arr);
    int n = arr.length;

    // Perform radix sort for each digit place value
    for (int exp = 1; max / exp > 0; exp *= 10) {
        // Perform counting sort based on the current digit place value
        countingSort(arr, n, exp);
    }
}

private static void countingSort(int[] arr, int n, int exp) {
    int[] output = new int[n];
    int[] count = new int[10];

    // Count the occurrences of digits at the current digit place
    for (int i = 0; i < n; i++) {
        int digit = (arr[i] / exp) % 10;
        count[digit]++;
    }

    // Update count[i] to contain the actual position of the digit in the output array
    for (int i = 1; i < 10; i++) {
        count[i] += count[i - 1];
    }

    // Build the output array
    for (int i = n - 1; i >= 0; i--) {
        int digit = (arr[i] / exp) % 10;
        output[count[digit] - 1] = arr[i];
        count[digit]--;
    }

    // Copy the output array back to the original array
    System.arraycopy(output, 0, arr, 0, n);
}

private static int getMax(int[] arr) {
    int max = arr[0];
    for (int num : arr) {
        if (num > max) {
            max = num;
        }
    }
    return max;
}

